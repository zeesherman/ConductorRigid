#include "ConductorRigid.cuh"
#include <stdio.h>
#include "TextureTools.h"
#include <cusp/linear_operator.h>

#ifndef __PotentialWrapper_CUH__
#define __PotentialWrapper_CUH__ 

#ifdef WIN32
#include <cassert>
#else
#include <assert.h>
#endif

// command to convert floats or doubles to integers
#ifdef SINGLE_PRECISION
#define __scalar2int_rd __float2int_rd
#else
#define __scalar2int_rd __double2int_rd
#endif

// Construct class wrapper to use the grand potential matrix as a matrix-free method in CUSP.
class cuspPotential : public cusp::linear_operator<float,cusp::device_memory>
{
public:

   	typedef cusp::linear_operator<float,cusp::device_memory> super; // Defines size of linear operator
  
	Scalar4 *d_bead_pos; // particle posisitons

	unsigned int *d_group_membership; // particle index in active group
	unsigned int *d_group_members; // particles in active group
	unsigned int *d_isolated_membership; // isolated body tag each particle belongs to (from plugin)
	unsigned int *d_rigid_membership; // rigid body index each particle belongs to (from HOOMD); isolated beads get NOT_MEMBER
	unsigned int *d_rigid_members; // indices of beads belonging to each rigid body
	unsigned int *d_rigid_size; // number of beads in each rigid body

	const BoxDim& box; // simulation box
	unsigned int group_size; // number of particles in active group
	unsigned int N_rigid; // number of rigid bodies
	unsigned int N_isolated;  // number of isolated bodies
	unsigned int max_rigid_size; // maximum rigid body body

	unsigned int block_size; // number of threads to use per block
	unsigned int max_block_size; // maximum block size for the charge sum calculation

	Scalar xi; // Ewald splitting parameter
	Scalar3 eta; // spectral splitting parameter
	Scalar rc; // real space cutoff radius
	unsigned int Nx; // number of grid nodes in the x dimension
	unsigned int Ny; // number of grid nodes in the y dimension
	unsigned int Nz; // number of grid nodes in the z dimension
	Scalar3 gridh; // grid spacing
	unsigned int P; // number of grid nodes over which to spread and contract

	CUFFTCOMPLEX *d_qgrid; // wave space charge grid
	Scalar *d_scale_phiq; // potential/dipole scaling on grid
	cufftHandle plan; // plan for the FFTs

	unsigned int N_table; // number of entries in the real space coefficient table
	Scalar drtable; // real space coefficient table spacing
	Scalar2 *d_phiq_table; // pointer to potential/charge real space table

	const unsigned int *d_nlist; // neighbor list
	const unsigned int *d_head_list; // used to access entries in the neighbor list
	const unsigned int *d_n_neigh; // number of neighbors of each particle

    	// constructor
    	cuspPotential(	Scalar4 *d_bead_pos,
			unsigned int *d_group_membership, 
			unsigned int *d_group_members,
			unsigned int *d_isolated_membership,
			unsigned int *d_rigid_membership,
			unsigned int *d_rigid_members,
			unsigned int *d_rigid_size,
			const BoxDim& box,
			unsigned int group_size,
			unsigned int N_rigid,
			unsigned int N_isolated,
			unsigned int max_rigid_size,
			unsigned int block_size,
			unsigned int max_block_size,
			Scalar xi,
			Scalar3 eta,
			Scalar rc,
			unsigned int Nx,
			unsigned int Ny,
			unsigned int Nz,
			Scalar3 gridh,
			unsigned int P,
			CUFFTCOMPLEX *d_qgrid,
			Scalar *d_scale_phiq,
			cufftHandle plan,
			unsigned int N_table,
			Scalar drtable,
			Scalar2 *d_phiq_table,
			const unsigned int *d_nlist,
			const unsigned int *d_head_list,
			const unsigned int *d_n_neigh)
                      : super(group_size+N_isolated, group_size+N_isolated), 
		  	d_bead_pos(d_bead_pos),
			d_group_membership(d_group_membership), 
			d_group_members(d_group_members), 
			d_isolated_membership(d_isolated_membership), 
			d_rigid_membership(d_rigid_membership), 
			d_rigid_members(d_rigid_members), 
			d_rigid_size(d_rigid_size), 
			box(box), 
			group_size(group_size),
			N_rigid(N_rigid),
			N_isolated(N_isolated),
			max_rigid_size(max_rigid_size), 
			block_size(block_size), 
			max_block_size(max_block_size),
			xi(xi), 
			eta(eta), 
			rc(rc), 
			Nx(Nx), 
			Ny(Ny), 
			Nz(Nz), 
			gridh(gridh), 
			P(P), 
			d_qgrid(d_qgrid),
			d_scale_phiq(d_scale_phiq), 
			plan(plan), 
			N_table(N_table), 
			drtable(drtable), 
			d_phiq_table(d_phiq_table), 
			d_nlist(d_nlist), 
			d_head_list(d_head_list), 
			d_n_neigh(d_n_neigh)
{
}


    // Perform the linear matrix multiplication operation y = A*x
    template <typename VectorType1,
             typename VectorType2>
    void operator()( VectorType1& x, VectorType2& y )
    {

        // obtain a raw pointer to device memory for input and output arrays
        float *x_ptr = thrust::raw_pointer_cast(&x[0]);
        float *y_ptr = thrust::raw_pointer_cast(&y[0]);

        // run kernels to compute y = A*x
	MatrixVectorMultiply(d_bead_pos, x_ptr, d_group_membership, d_group_members, d_isolated_membership, d_rigid_membership, 			     d_rigid_members, d_rigid_size, box, group_size, N_rigid, max_rigid_size, block_size, max_block_size, y_ptr, xi,
			     eta, rc, Nx, Ny, Nz, gridh, P, d_qgrid, d_scale_phiq, plan, N_table, drtable, d_phiq_table, d_nlist, d_head_list,
			     d_n_neigh);

    }
};

#endif
